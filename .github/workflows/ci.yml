name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed paths (docs-only 判定)
        id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ github.token }}
          filters: |
            docs:
              - '**/*.md'
              - 'docs/**'
            nondocs:
              - '**'
              - '!**/*.md'
              - '!docs/**'

      - name: Set DOCS_ONLY env
        run: |
          if [ "${{ steps.changes.outputs.docs }}" = 'true' ] && [ "${{ steps.changes.outputs.nondocs }}" != 'true' ]; then
            echo "DOCS_ONLY=true" >> $GITHUB_ENV
          else
            echo "DOCS_ONLY=false" >> $GITHUB_ENV
          fi

      - name: Docs-only change; skipping heavy CI
        if: env.DOCS_ONLY == 'true'
        run: |
          echo "Docs-only change detected. Skipping install, build, type-check, lint and tests."

      - name: Setup Node.js
        if: env.DOCS_ONLY != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        if: env.DOCS_ONLY != 'true'
        run: npm ci

      - name: Setup database
        if: env.DOCS_ONLY != 'true'
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Run type check
        if: env.DOCS_ONLY != 'true'
        run: npm run type-check

      - name: Run lint
        if: env.DOCS_ONLY != 'true'
        run: npm run lint

      - name: Run tests with coverage
        if: env.DOCS_ONLY != 'true'
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test

      - name: Upload coverage reports
        if: env.DOCS_ONLY != 'true'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: kokutaro/mahjong-point-manager

      - name: Build application
        if: env.DOCS_ONLY != 'true'
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
