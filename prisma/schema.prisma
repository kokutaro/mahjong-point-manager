generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                  String               @id @default(cuid())
  name                String
  avatar              String?
  deviceId            String?
  lastLogin           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  gameEvents          GameEvent[]
  gameParticipants    GameParticipant[]
  hostedSessions      GameSession[]
  hostedGames         Game[]
  sessionParticipants SessionParticipant[]

  @@map("players")
}

model Game {
  id           String            @id @default(cuid())
  roomCode     String            @unique
  hostPlayerId String
  gameType     GameType          @default(HANCHAN)
  status       GameStatus        @default(WAITING)
  currentRound Int               @default(1)
  honba        Int               @default(0)
  kyotaku      Int               @default(0)
  startingOya  Int               @default(0)
  currentOya   Int               @default(0)
  sessionId    String?
  sessionOrder Int?
  settingsId   String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  startedAt    DateTime?
  endedAt      DateTime?
  events       GameEvent[]
  participants GameParticipant[]
  result       GameResult?
  hostPlayer   Player            @relation(fields: [hostPlayerId], references: [id])
  session      GameSession?      @relation(fields: [sessionId], references: [id])
  settings     GameSettings?     @relation(fields: [settingsId], references: [id])

  @@map("games")
}

model GameSession {
  id           String               @id @default(cuid())
  sessionCode  String               @unique
  hostPlayerId String
  name         String?
  status       SessionStatus        @default(ACTIVE)
  settingsId   String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  endedAt      DateTime?
  hostPlayer   Player               @relation(fields: [hostPlayerId], references: [id])
  settings     GameSettings?        @relation(fields: [settingsId], references: [id])
  games        Game[]
  participants SessionParticipant[]

  @@map("game_sessions")
}

model SessionParticipant {
  id              String      @id @default(cuid())
  sessionId       String
  playerId        String
  position        Int
  totalGames      Int         @default(0)
  totalPoints     Int         @default(0)
  totalUma        Int         @default(0)
  totalSettlement Int         @default(0)
  firstPlace      Int         @default(0)
  secondPlace     Int         @default(0)
  thirdPlace      Int         @default(0)
  fourthPlace     Int         @default(0)
  player          Player      @relation(fields: [playerId], references: [id])
  session         GameSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, playerId])
  @@unique([sessionId, position])
  @@map("session_participants")
}

model GameParticipant {
  id            String  @id @default(cuid())
  gameId        String
  playerId      String
  position      Int
  currentPoints Int     @default(25000)
  isReach       Boolean @default(false)
  reachRound    Int?
  finalPoints   Int?
  finalRank     Int?
  uma           Int?
  oka           Int?
  settlement    Int?
  game          Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        Player  @relation(fields: [playerId], references: [id])

  @@unique([gameId, position])
  @@unique([gameId, playerId])
  @@map("game_participants")
}

model GameSettings {
  id              String        @id @default(cuid())
  gameType        GameType      @default(HANCHAN)
  initialPoints   Int           @default(25000)
  basePoints      Int           @default(30000)
  uma             Json          @default("[20, 10, -10, -20]")
  hasTobi         Boolean       @default(true)
  hasYakitori     Boolean       @default(false)
  tobiPenalty     Int           @default(20)
  yakitoriPenalty Int           @default(20)
  sessions        GameSession[]
  games           Game[]

  @@map("game_settings")
}

model GameEvent {
  id        String    @id @default(cuid())
  gameId    String
  playerId  String?
  eventType EventType
  round     Int
  honba     Int
  eventData Json
  createdAt DateTime  @default(now())
  game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player    Player?   @relation(fields: [playerId], references: [id])

  @@map("game_events")
}

model GameResult {
  id        String   @id @default(cuid())
  gameId    String   @unique
  results   Json
  createdAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@map("game_results")
}

model ScorePattern {
  id          String @id @default(cuid())
  han         Int
  fu          Int
  oyaPoints   Int
  koPoints    Int
  oyaTsumoAll Int
  koTsumoOya  Int
  koTsumoKo   Int

  @@unique([han, fu])
  @@map("score_patterns")
}

enum GameType {
  TONPUU
  HANCHAN
}

enum GameStatus {
  WAITING
  PLAYING
  FINISHED
  CANCELLED
}

enum EventType {
  TSUMO
  RON
  REACH
  RYUKYOKU
  GAME_START
  GAME_END
}

enum SessionStatus {
  ACTIVE
  PAUSED
  FINISHED
  CANCELLED
}
